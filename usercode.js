/* start of iframe communication stuff */

var extId = window.location.hash.substr(1);
var hosted = false;
var idToType = {};
var usercode = {};

console.log(`extension id: ${this.extId}`)
window.addEventListener(
    "message",
    ev => ev.data.type == "pxtpkgext" ? receiveMessage(ev.data) : undefined,
    false);
sendRequest("extinit");

function receiveMessage(ev) {
    console.log(ev);
    if (ev.event) {
        switch (ev.event) {
            case "extconsole":
                var cons = ev;
                console.log(cons);
                // drop sim
                if (cons.body.sim) return;
                break;
            case "extshown":
                console.log('shown')
                //connected = true;
                this.sendRequest("extdatastream");
                this.sendRequest("extreadcode")
                break;
            case "exthidden":
                console.log('hidden')
                //connected = false;
                break;
            default:
                break;
        }
        return;
    }

    var action = idToType[ev.id];
    console.log(`msg: ${action}`)
    delete idToType[ev.id];
    switch (action) {
        case "extinit":
            sendRequest("extdatastream");
            sendRequest("extreadcode");
            break;
        case "extreadcode":
            // received existing code
            var usercode = data;
            console.log(usercode);
            //loadBlocks(usercode.resp.code, usercode.resp.json);
            break;
        default: break;
    }
}

function isIFrame() {
    try {
        return window && window.self !== window.top;
    } catch (e) {
        return true;
    }
}

function sendRequest(action, body=null) {
    console.log("body: ", body);
    var id = Math.random().toString();
    idToType[id] = action;
    var msg = {
        type: "pxtpkgext",
        action: action,
        extId: extId,
        response: true,
        id: id,
        body
    };
    //if (window.parent && window != window.parent)
    window.parent.postMessage(msg, "*");
}

function renderUserCode() {
    console.log("render code function");
    var ts = `// This file was autogenerated, do not edit.
namespace layoutdesigner {

/*
* A neopixel layout
*/
//% blockId="testblock" block="testblock %num"   
export function testing(num: number): number {
    return num;
}
}` 
        return ts;
    }

function saveUserCode() {            
    var ts = renderUserCode();
    sendRequest("extwritecode", {
        code: ts,
        json: JSON.stringify(usercode, null, 2)
    });
    console.log("save function");
}

/* end of iframe communication stuff */